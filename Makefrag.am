# Main Makefile fragment for GNU Mach.

# Copyright 1997, 1999, 2004, 2006 Free Software Foundation, Inc.

# Permission to use, copy, modify and distribute this software and its
# documentation is hereby granted, provided that both the copyright
# notice and this permission notice appear in all copies of the
# software, derivative works or modified versions, and any portions
# thereof, and that both notices appear in supporting documentation.
#
# THE FREE SOFTWARE FOUNDATION ALLOWS FREE USE OF THIS SOFTWARE IN ITS
# "AS IS" CONDITION.  THE FREE SOFTWARE FOUNDATION DISCLAIMS ANY
# LIABILITY OF ANY KIND FOR ANY DAMAGES WHATSOEVER RESULTING FROM THE
# USE OF THIS SOFTWARE.

# Do we want the icky kernel debugger?
if enable_kdb
# DDB support --- eventually to die.  Please.
libkernel_a_SOURCES += \
	ddb/db_access.c \
	ddb/db_aout.c \
	ddb/db_break.c \
	ddb/db_command.c \
	ddb/db_cond.c \
	ddb/db_examine.c \
	ddb/db_expr.c \
	ddb/db_ext_symtab.c \
	ddb/db_input.c \
	ddb/db_lex.c \
	ddb/db_macro.c \
	ddb/db_mp.c \
	ddb/db_output.c \
	ddb/db_print.c \
	ddb/db_run.c \
	ddb/db_sym.c \
	ddb/db_task_thread.c \
	ddb/db_trap.c \
	ddb/db_variables.c \
	ddb/db_watch.c \
	ddb/db_write_cmd.c 
endif

# IPC implementation.
libkernel_a_SOURCES += \
	ipc/ipc_entry.c \
	ipc/ipc_hash.c \
	ipc/ipc_init.c \
	ipc/ipc_kmsg.c \
	ipc/ipc_marequest.c \
	ipc/ipc_mqueue.c \
	ipc/ipc_notify.c \
	ipc/ipc_object.c \
	ipc/ipc_port.c \
	ipc/ipc_pset.c \
	ipc/ipc_right.c \
	ipc/ipc_space.c \
	ipc/ipc_splay.c \
	ipc/ipc_table.c \
	ipc/ipc_target.c \
	ipc/ipc_thread.c \
	ipc/mach_msg.c \
	ipc/mach_port.c \
	ipc/mach_rpc.c \
	ipc/mach_debug.c 

# "kernel" implementation (tasks, threads, trivia, etc.).
libkernel_a_SOURCES += \
	kern/act.c \
	kern/ast.c \
	kern/bootstrap.c \
	kern/counters.c \
	kern/debug.c \
	kern/eventcount.c \
	kern/exception.c \
	kern/host.c \
	kern/ipc_host.c \
	kern/ipc_kobject.c \
	kern/ipc_mig.c \
	kern/ipc_sched.c \
	kern/ipc_tt.c \
	kern/kalloc.c \
	kern/lock.c \
	kern/lock_mon.c \
	kern/mach_clock.c \
	kern/mach_factor.c \
	kern/machine.c \
	kern/pc_sample.c \
	kern/printf.c \
	kern/priority.c \
	kern/processor.c \
	kern/profile.c \
	kern/queue.c \
	kern/sched_prim.c \
	kern/startup.c \
	kern/strings.c \
	kern/syscall_emulation.c \
	kern/syscall_subr.c \
	kern/syscall_sw.c \
	kern/task.c \
	kern/thread.c \
	kern/thread_swap.c \
	kern/time_stamp.c \
	kern/timer.c \
	kern/xpr.c \
	kern/zalloc.c \
	kern/elf-load.c \
	kern/boot_script.c

# Still more trivia.
libkernel_a_SOURCES += \
	util/putchar.c \
	util/puts.c

# Virtual memory implementation.
libkernel_a_SOURCES += \
	vm/vm_debug.c \
	vm/vm_external.c \
	vm/vm_fault.c \
	vm/vm_init.c \
	vm/vm_kern.c \
	vm/vm_map.c \
	vm/vm_object.c \
	vm/vm_pageout.c \
	vm/vm_resident.c \
	vm/vm_user.c \
	vm/memory_object.c

# These device support files are always needed; the others are needed only if
# particular drivers want the routines.
# TODO.  Functions in device/subrs.c should each be moved elsewhere.
libkernel_a_SOURCES += \
	device/cons.c \
	device/dev_lookup.c \
	device/dev_name.c \
	device/dev_pager.c \
	device/device_init.c \
	device/ds_routines.c \
	device/subrs.c \
	device/net_io.c \
	device/blkio.c \
	device/chario.c

# kmsg device.
if enable_kmsg
libkernel_a_SOURCES += \
	device/kmsg.c
endif

# Version number.
libkernel_a_SOURCES += \
	version.c

#
# Installation.
#

include_devicedir = $(includedir)/device
include_device_HEADERS = \
	include/device/audio_status.h \
	include/device/bpf.h \
	include/device/device.defs \
	include/device/device_reply.defs \
	include/device/device_request.defs \
	include/device/device_types.defs \
	include/device/device_types.h \
	include/device/disk_status.h \
	include/device/net_status.h \
	include/device/tape_status.h \
	include/device/tty_status.h

include_machdir = $(includedir)/mach
include_mach_HEADERS = \
	include/mach/bootstrap.defs \
	include/mach/default_pager.defs \
	include/mach/default_pager_helper.defs \
	include/mach/default_pager_types.defs \
	include/mach/exc.defs \
	include/mach/mach.defs \
	include/mach/mach4.defs \
	include/mach/mach_host.defs \
	include/mach/mach_port.defs \
	include/mach/mach_types.defs \
	include/mach/memory_object.defs \
	include/mach/memory_object_default.defs \
	include/mach/notify.defs \
	include/mach/std_types.defs \
	include/mach/alert.h \
	include/mach/boolean.h \
	include/mach/boot.h \
	include/mach/default_pager_types.h \
	include/mach/exception.h \
	include/mach/host_info.h \
	include/mach/kern_return.h \
	include/mach/mach_param.h \
	include/mach/mach_types.h \
	include/mach/machine.h \
	include/mach/macro_help.h \
	include/mach/memory_object.h \
	include/mach/message.h \
	include/mach/mig_errors.h \
	include/mach/msg_type.h \
	include/mach/multiboot.h \
	include/mach/notify.h \
	include/mach/pc_sample.h \
	include/mach/policy.h \
	include/mach/port.h \
	include/mach/processor_info.h \
	include/mach/profil.h \
	include/mach/profilparam.h \
	include/mach/rpc.h \
	include/mach/std_types.h \
	include/mach/syscall_sw.h \
	include/mach/task_info.h \
	include/mach/task_special_ports.h \
	include/mach/thread_info.h \
	include/mach/thread_special_ports.h \
	include/mach/thread_status.h \
	include/mach/thread_switch.h \
	include/mach/time_value.h \
	include/mach/version.h \
	include/mach/vm_attributes.h \
	include/mach/vm_inherit.h \
	include/mach/vm_param.h \
	include/mach/vm_prot.h \
	include/mach/vm_statistics.h \
	include/mach/inline.h

# If we name this `*_execdir', Automake won't add it to `install-data'...
include_mach_eXecdir = $(includedir)/mach/exec
include_mach_eXec_HEADERS = \
	include/mach/exec/a.out.h \
	include/mach/exec/elf.h \
	include/mach/exec/exec.h

# mach-debug-headers:= $(addprefix mach_debug/, hash_info.h ipc_info.h \
# 		mach_debug.defs mach_debug_types.defs mach_debug_types.h \
# 		pc_info.h vm_info.h zone_info.h)

# Other headers for the distribution.  We don't install these, because the
# GNU C library has correct versions for users to use.
# other-sys-headers := types.h time.h reboot.h ioctl.h
# other-mach-headers := mig_support.h mach_traps.h error.h
# other-headers := alloca.h

install-data-hook:
	rm -f '$(DESTDIR)$(include_machdir)'/machine
	ln -s '$(systype)' '$(DESTDIR)$(include_machdir)'/machine

#
# Automatically generated source files.
#

# TODO.  Get rid of that stuff and lib_dep_tr_for_defs.a.  See the thread at
# <http://lists.gnu.org/archive/html/automake/2006-10/msg00039.html> about what
# we really want to do.
noinst_LIBRARIES += \
	lib_dep_tr_for_defs.a
nodist_lib_dep_tr_for_defs_a_SOURCES =
MOSTLYCLEANFILES += \
	$(nodist_lib_dep_tr_for_defs_a_SOURCES)
# Preprocess only.
lib_dep_tr_for_defs_a_CPPFLAGS = $(AM_CPPFLAGS) \
	-E

# User stubs.
nodist_lib_dep_tr_for_defs_a_SOURCES += \
	vm/memory_object_user.user.defs.c \
	vm/memory_object_default.user.defs.c
nodist_libkernel_a_SOURCES += \
	vm/memory_object_user.user.h \
	vm/memory_object_user.user.c \
	vm/memory_object_default.user.h \
	vm/memory_object_default.user.c
#	vm/memory_object_user.user.defs
#	vm/memory_object_default.user.defs
nodist_lib_dep_tr_for_defs_a_SOURCES += \
	device/device_reply.user.defs.c \
	device/memory_object_reply.user.defs.c
nodist_libkernel_a_SOURCES += \
	device/device_reply.user.h \
	device/device_reply.user.c \
	device/memory_object_reply.user.h \
	device/memory_object_reply.user.c
#	device/device_reply.user.defs
#	device/memory_object_reply.user.defs

# Server stubs.
nodist_lib_dep_tr_for_defs_a_SOURCES += \
	device/device.server.defs.c \
	device/device_pager.server.defs.c
nodist_libkernel_a_SOURCES += \
	device/device.server.h \
	device/device.server.c \
	device/device_pager.server.h \
	device/device_pager.server.c
#	device/device.server.defs
#	device/device_pager.server.defs
nodist_lib_dep_tr_for_defs_a_SOURCES += \
	ipc/mach_port.server.defs.c
nodist_libkernel_a_SOURCES += \
	ipc/mach_port.server.h \
	ipc/mach_port.server.c
#	ipc/mach_port.server.defs
nodist_lib_dep_tr_for_defs_a_SOURCES += \
	kern/mach.server.defs.c \
	kern/mach4.server.defs.c \
	kern/mach_debug.server.defs.c \
	kern/mach_host.server.defs.c
nodist_libkernel_a_SOURCES += \
	kern/mach.server.h \
	kern/mach.server.c \
	kern/mach4.server.h \
	kern/mach4.server.c \
	kern/mach_debug.server.h \
	kern/mach_debug.server.c \
	kern/mach_host.server.h \
	kern/mach_host.server.c
#	kern/mach.server.defs
#	kern/mach4.server.defs
#	kern/mach_debug.server.defs
#	kern/mach_host.server.defs

# rpctrace can make use of that.
MOSTLYCLEANFILES += \
	gnumach.msgids
gnumach.msgids: $(nodist_lib_dep_tr_for_defs_a_SOURCES)
	rm -f gnumach.msgids
	for f in $(nodist_lib_dep_tr_for_defs_a_SOURCES); do	\
	  f=`expr "$$f" : '\(.*\)\.defs\.c'`.msgids &&		\
	  $(MAKE) $(AM_MAKEFLAGS) "$$f" &&			\
	  cat "$$f" >> $@ || { rm -f $@; false; }		\
	done
# `exec_' prefix, so that we don't try to build that file during when running
# `make install-data', as it may fail there, but isn't needed there either.
exec_msgidsdir = $(datadir)/msgids
exec_msgids_DATA = gnumach.msgids

#
# Architecture specific parts.
#

if HOST_i386
include i386/Makefrag.am
endif
